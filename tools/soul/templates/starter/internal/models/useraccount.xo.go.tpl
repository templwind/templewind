package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
)

// UserAccount represents a row from 'user_accounts'.
type UserAccount struct {
	UserID    string `json:"user_id" db:"user_id" form:"user_id"`          // user_id
	AccountID string `json:"account_id" db:"account_id" form:"account_id"` // account_id
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [UserAccount] exists in the database.
func (ua *UserAccount) Exists() bool {
	return ua._exists
}

// Deleted returns true when the [UserAccount] has been marked for deletion
// from the database.
func (ua *UserAccount) Deleted() bool {
	return ua._deleted
}

// Insert inserts the [UserAccount] to the database.
func (ua *UserAccount) Insert(ctx context.Context, db DB) error {
	switch {
	case ua._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case ua._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO user_accounts (` +
		`user_id, account_id` +
		`) VALUES (` +
		`$1, $2` +
		`)`
	// run
	logf(sqlstr, ua.UserID, ua.AccountID)
	if _, err := db.ExecContext(ctx, sqlstr, ua.UserID, ua.AccountID); err != nil {
		return logerror(err)
	}
	// set exists
	ua._exists = true
	return nil
}

// ------ NOTE: Update statements omitted due to lack of fields other than primary key ------

// Delete deletes the [UserAccount] from the database.
func (ua *UserAccount) Delete(ctx context.Context, db DB) error {
	switch {
	case !ua._exists: // doesn't exist
		return nil
	case ua._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM user_accounts ` +
		`WHERE user_id = $1 AND account_id = $2`
	// run
	logf(sqlstr, ua.UserID, ua.AccountID)
	if _, err := db.ExecContext(ctx, sqlstr, ua.UserID, ua.AccountID); err != nil {
		return logerror(err)
	}
	// set deleted
	ua._deleted = true
	return nil
}

// UserAccountsByUserID retrieves a row from 'user_accounts' as a [UserAccount].
//
// Generated from index 'idx_user_accounts_user_id'.
func UserAccountsByUserID(ctx context.Context, db DB, userID string) ([]*UserAccount, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, account_id ` +
		`FROM user_accounts ` +
		`WHERE user_id = $1`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*UserAccount
	for rows.Next() {
		ua := UserAccount{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&ua.UserID, &ua.AccountID); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &ua)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// UserAccountByUserIDAccountID retrieves a row from 'user_accounts' as a [UserAccount].
//
// Generated from index 'sqlite_autoindex_user_accounts_1'.
func UserAccountByUserIDAccountID(ctx context.Context, db DB, userID, accountID string) (*UserAccount, error) {
	// query
	const sqlstr = `SELECT ` +
		`user_id, account_id ` +
		`FROM user_accounts ` +
		`WHERE user_id = $1 AND account_id = $2`
	// run
	logf(sqlstr, userID, accountID)
	ua := UserAccount{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, userID, accountID).Scan(&ua.UserID, &ua.AccountID); err != nil {
		return nil, logerror(err)
	}
	return &ua, nil
}

// AccountByAccountID returns the Account associated with the [UserAccount]'s (AccountID).
//
// Generated from foreign key 'user_accounts_account_id_fkey'.
func (ua *UserAccount) AccountByAccountID(ctx context.Context, db DB) (*Account, error) {
	return AccountByID(ctx, db, ua.AccountID)
}

// UserByUserID returns the User associated with the [UserAccount]'s (UserID).
//
// Generated from foreign key 'user_accounts_user_id_fkey'.
func (ua *UserAccount) UserByUserID(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, ua.UserID)
}
